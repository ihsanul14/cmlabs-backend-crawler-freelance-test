// Code generated by MockGen. DO NOT EDIT.
// Source: entity/memory/memory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	memory "cmlabs-backend-crawler-freelance-test/entity/memory"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMemory is a mock of IMemory interface.
type MockIMemory struct {
	ctrl     *gomock.Controller
	recorder *MockIMemoryMockRecorder
}

// MockIMemoryMockRecorder is the mock recorder for MockIMemory.
type MockIMemoryMockRecorder struct {
	mock *MockIMemory
}

// NewMockIMemory creates a new mock instance.
func NewMockIMemory(ctrl *gomock.Controller) *MockIMemory {
	mock := &MockIMemory{ctrl: ctrl}
	mock.recorder = &MockIMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemory) EXPECT() *MockIMemoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockIMemory) Save(arg0 context.Context, arg1 memory.SaveRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIMemoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIMemory)(nil).Save), arg0, arg1)
}
