// Code generated by MockGen. DO NOT EDIT.
// Source: entity/http/http.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "cmlabs-backend-crawler-freelance-test/entity/http"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIHttp is a mock of IHttp interface.
type MockIHttp struct {
	ctrl     *gomock.Controller
	recorder *MockIHttpMockRecorder
}

// MockIHttpMockRecorder is the mock recorder for MockIHttp.
type MockIHttpMockRecorder struct {
	mock *MockIHttp
}

// NewMockIHttp creates a new mock instance.
func NewMockIHttp(ctrl *gomock.Controller) *MockIHttp {
	mock := &MockIHttp{ctrl: ctrl}
	mock.recorder = &MockIHttpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHttp) EXPECT() *MockIHttpMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIHttp) Call(arg0 context.Context, arg1 string) (*http.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(*http.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIHttpMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIHttp)(nil).Call), arg0, arg1)
}
